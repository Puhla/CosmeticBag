throw  бросать

public int lastIndexOf(Object o) {
    // Проверка, что объект не null
    if (o != null) {
        // Когда в листе есть объект, который не null

        // Начинаем итерации с конечного индекса (size - 1) и идем в обратном направлении
        for (int i = size - 1; i >= 0; i--) {
            // Проверяем, равен ли текущий элемент целевому объекту
            if (o.equals(elements[i])) {
                // Если да, возвращаем индекс текущего элемента (последний индекс вхождения)
                return i;
            }
        }
    } else {
        // Когда в листе есть объект, который null

        // Начинаем итерации с конечного индекса (size - 1) и идем в обратном направлении
        for (int i = size - 1; i >= 0; i--) {
            // Проверяем, является ли текущий элемент null
            if (null == (elements[i])) {
                // Если да, возвращаем индекс текущего элемента (последний индекс вхождения null)
                return i;
            }
        }
    }

    // Если объект не найден, возвращаем -1
    return -1;
}




/////if (o.equals(elements[i])) {
    // Если да, возвращаем индекс текущего элемента (последнее вхождение)
    return i;
}
Этот блок кода проверяет, равен ли текущий элемент массива elements[i] целевому объекту o.
 разберем его часть за частью:

**o.equals(elements[i]): Это условие проверяет, равен ли объект o (целевой объект, который мы ищем) текущему элементу
массива elements[i].
* Метод equals сравнивает содержимое объектов на равенство.
if (o.equals(elements[i])) {: Это целое условие выполняется, если o равен текущему элементу массива elements[i].
Если это условие истинно, то мы нашли вхождение, и выполняем следующий блок кода внутри {}.
* return i;: Если мы нашли вхождение, возвращаем текущий индекс i.
Это означает, что мы нашли последнее вхождение (если их несколько) целевого объекта в массиве, и функция завершается.
Таким образом, когда o.equals(elements[i]) верно, мы возвращаем текущий индекс i как результат метода lastIndexOf.
Это означает, что мы нашли последний индекс вхождения объекта o в массиве (или список).



lastIndexOf на самом деле ищет последний индекс, где элемент встречается в массиве (или списке),
а не просто последнее вхождение.
lastIndexOf ищет последний индекс в массиве (или списке), где элемент равен целевому объекту.